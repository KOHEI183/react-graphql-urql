scalar DateTime

# バックエンドからすべてのリンクを取得。このクエリでは、フィルター、並べ替え、およびページ付けの引数も使用できる
# 例 feedサーバーから最初の 10 個のリンクを取得するクエリ
# {
#   feed(skip: 0, first: 10) {
#     links {
#       description
#       url
#       postedBy {
#         name
#       }
#     }
#   }
# }
type Query {
  info: String!
  feed(filter: String, skip: Int, first: Int, orderBy: LinkOrderByInput): Feed!
}

enum LinkOrderByInput {
  description_ASC
  description_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
}

type Feed {
  links: [Link!]!
  count: Int!
}

# 例：signup新しいユーザーを作成するためのミューテーション
# mutation {
#   signup(
#     name: "Sarah",
#     email: "sarah@graph.cool",
#     password: "graphql"
#   ) {
#     token
#     user {
#       id
#     }
#   }
# }

type Mutation {
  # 認証されたユーザーが新しいリンクを作成できる
  post(url: String!, description: String!): Link!
  # 新しいユーザーのアカウントを作成
  signup(email: String!, password: String!, name: String!): AuthPayload
  #  既存のユーザーにログイン
  login(email: String!, password: String!): AuthPayload
  # 認証されたユーザーが既存のリンクに投票できる
  vote(linkId: ID!): Vote!
}

type Subscription {
  # 新しいリンクが作成されると、リアルタイムの更新を受け取れる
  newLink: Link
  # 投票が送信されたときにリアルタイムで最新情報を受け取る
  newVote: Vote
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
  links: [Link!]!
}

type Link {
  id: ID!
  createdAt: DateTime!
  description: String!
  url: String!
  postedBy: User
  votes: [Vote!]!
}

type Vote {
  id: ID!
  link: Link!
  user: User!
}
